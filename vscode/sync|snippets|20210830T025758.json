{"version":1,"content":"{\"assert.code-snippets\":\"{\\n\\t\\\"assert(expression, message)\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert(expression, message)\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert(${1:expression}, ${2:message});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Write your own test expressions.\\\"\\n\\t},\\n\\t\\\"assert.fail([message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.fail([message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.fail(${1:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Throw a failure. Node.js assert module-compatible.\\\"\\n\\t},\\n\\t\\\"assert.fail(actual, expected, [message], [operator])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.fail(actual, expected, [message], [operator])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.fail(${1:actual}, ${2:expected}, ${3:[message]}, ${4:[operator]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Throw a failure. Node.js assert module-compatible.assert.fail(); assert.fail(\\\\\\\"custom error message\\\\\\\");\\\\nassert.fail(1, 2);\\\\nassert.fail(1, 2, \\\\\\\"custom error message\\\\\\\");\\\\nassert.fail(1, 2, \\\\\\\"custom error message\\\\\\\", \\\\\\\">\\\\\\\");\\\\nassert.fail(1, 2, undefined, \\\\\\\">\\\\\\\");\\\\n\\\"\\n\\t},\\n\\t\\\"assert.isOk(object, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isOk(object, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isOk(${1:object}, ${2:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that object is truthy.\\\"\\n\\t},\\n\\t\\\"assert.isNotOk(object, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isNotOk(object, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isNotOk(${1:object}, ${2:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that object is falsy.\\\"\\n\\t},\\n\\t\\\"assert.equal(actual, expected, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.equal(actual, expected, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.equal(${1:actual}, ${2:expected}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts non-strict equality (==) of actual and expected.\\\"\\n\\t},\\n\\t\\\"assert.notEqual(actual, expected, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.notEqual(actual, expected, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.notEqual(${1:actual}, ${2:expected}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts non-strict inequality (!=) of actual and expected.\\\"\\n\\t},\\n\\t\\\"assert.strictEqual(actual, expected, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.strictEqual(actual, expected, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.strictEqual(${1:actual}, ${2:expected}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts strict equality (===) of actual and expected.\\\"\\n\\t},\\n\\t\\\"assert.notStrictEqual(actual, expected, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.notStrictEqual(actual, expected, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.notStrictEqual(${1:actual}, ${2:expected}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts strict inequality (!==) of actual and expected.\\\"\\n\\t},\\n\\t\\\"assert.deepEqual(actual, expected, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.deepEqual(actual, expected, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.deepEqual(${1:actual}, ${2:expected}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that actual is deeply equal to expected.\\\"\\n\\t},\\n\\t\\\"assert.notDeepEqual(actual, expected, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.notDeepEqual(actual, expected, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.notDeepEqual(${1:actual}, ${2:expected}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Assert that actual is not deeply equal to expected.\\\"\\n\\t},\\n\\t\\\"assert.isAbove(valueToCheck, valueToBeAbove, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isAbove(valueToCheck, valueToBeAbove, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isAbove(${1:valueToCheck}, ${2:valueToBeAbove}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts valueToCheck is strictly greater than (>) valueToBeAbove.\\\"\\n\\t},\\n\\t\\\"assert.isAtLeast(valueToCheck, valueToBeAtLeast, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isAtLeast(valueToCheck, valueToBeAtLeast, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isAtLeast(${1:valueToCheck}, ${2:valueToBeLeast}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts valueToCheck is greater than or equal to (>=) valueToBeAtLeast.\\\"\\n\\t},\\n\\t\\\"assert.isBelow(valueToCheck, valueToBeBelow, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isBelow(valueToCheck, valueToBeBelow, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isBelow(${1:valueToCheck}, ${2:valueToBeBelow}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts valueToCheck is strictly less than (<) valueToBeBelow.\\\"\\n\\t},\\n\\t\\\"assert.isAtMost(valueToCheck, valueToBeAtMost, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isAtMost(valueToCheck, valueToBeAtMost, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isAtMost(${1:valueToCheck}, ${2:valueToBeAtMost}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts valueToCheck is less than or equal to (<=) valueToBeAtMost.\\\"\\n\\t},\\n\\t\\\"assert.isTrue(value, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isTrue(value, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isTrue(${1:value}, ${2:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that value is true.\\\"\\n\\t},\\n\\t\\\"assert.isNotTrue(value, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isNotTrue(value, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isNotTrue(${1:value}, ${2:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that value is not true.\\\"\\n\\t},\\n\\t\\\"assert.isFalse(value, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isFalse(value, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isFalse(${1:value}, ${2:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that value is false.\\\"\\n\\t},\\n\\t\\\"assert.isNotFalse(value, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isNotFalse(value, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isNotFalse(${1:value}, ${2:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that value is not false.\\\"\\n\\t},\\n\\t\\\"assert.isNull(value, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isNull(value, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isNull(${1:value}, ${2:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that value is null.\\\"\\n\\t},\\n\\t\\\"assert.isNotNull(value, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isNotNull(value, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isNotNull(${1:value}, ${2:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that value is not null.\\\"\\n\\t},\\n\\t\\\"assert.isNaN\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isNaN\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isNaN(${1:NaN}, ${2:[NaN is NaN]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that value is NaN.\\\"\\n\\t},\\n\\t\\\"assert.isNotNaN\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isNotNaN\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isNotNaN(${1:4}, ${2:[4 is not NaN]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that value is not NaN.\\\"\\n\\t},\\n\\t\\\"assert.exists\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.exists\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.exists(${1:value}, ${2:[foo is neither `null` nor `undefined]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that the target is neither null nor undefined.\\\"\\n\\t},\\n\\t\\\"assert.notExists\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.notExists\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.notExists(${1:value}, ${2:[baz is either null or undefined]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that the target is either null or undefined.\\\"\\n\\t},\\n\\t\\\"assert.isUndefined(value, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isUndefined(value, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isUndefined(${1:value}, ${2:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that value is undefined.\\\"\\n\\t},\\n\\t\\\"assert.isDefined(value, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isDefined(value, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isDefined(${1:value}, ${2:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that value is not undefined.\\\"\\n\\t},\\n\\t\\\"assert.isFunction(value, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isFunction(value, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isFunction(${1:value}, ${2:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that value is a function.\\\"\\n\\t},\\n\\t\\\"assert.isNotFunction(value, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isNotFunction(value, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isNotFunction(${1:value}, ${2:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that value is not a function.\\\"\\n\\t},\\n\\t\\\"assert.isObject(value, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isObject(value, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isObject(${1:value}, ${2:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that value is an object of type ‘Object’ (as revealed by Object.prototype.toString). The assertion does not match subclassed objects.\\\"\\n\\t},\\n\\t\\\"assert.isNotObject(value, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isNotObject(value, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isNotObject(${1:value}, ${2:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that value is not an object of type ‘Object’ (as revealed by Object.prototype.toString).\\\"\\n\\t},\\n\\t\\\"assert.isArray(value, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isArray(value, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isArray(${1:value}, ${2:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that value is an array.\\\"\\n\\t},\\n\\t\\\"assert.isNotArray(value, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isNotArray(value, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isNotArray(${1:value}, ${2:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that value is not an array.\\\"\\n\\t},\\n\\t\\\"assert.isString(value, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isString(value, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isString(${1:value}, ${2:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that value is a string.\\\"\\n\\t},\\n\\t\\\"assert.isNotString(value, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isNotString(value, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isNotString(${1:value}, ${2:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that value is not a string.\\\"\\n\\t},\\n\\t\\\"assert.isNumber(value, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isNumber(value, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isNumber(${1:value}, ${2:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that value is a number.\\\"\\n\\t},\\n\\t\\\"assert.isNotNumber(value, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isNotNumber(value, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isNotNumber(${1:value}, ${2:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that value is not a number.\\\"\\n\\t},\\n\\t\\\"assert.isFinite(value, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isFinite(value, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isFinite(${1:value}, ${2:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that value is a finite number. Unlike .isNumber, this will fail for NaN and Infinity.\\\"\\n\\t},\\n\\t\\\"assert.isBoolean(value, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isBoolean(value, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isBoolean(${1:value}, ${2:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that value is a boolean.\\\"\\n\\t},\\n\\t\\\"assert.isNotBoolean(value, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isNotBoolean(value, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isNotBoolean(${1:value}, ${2:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that value is not a boolean.\\\"\\n\\t},\\n\\t\\\"assert.typeOf(value, name, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.typeOf(value, name, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.typeOf(${1:value}, ${2:name}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that value’s type is name, as determined by Object.prototype.toString.\\\"\\n\\t},\\n\\t\\\"assert.notTypeOf(value, name, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.notTypeOf(value, name, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.notTypeOf(${1:value}, ${2:name}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that value’s type is not name, as determined by Object.prototype.toString.\\\"\\n\\t},\\n\\t\\\"assert.instanceOf(object, constructor, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.instanceOf(object, constructor, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.instanceOf(${1:object}, ${2:constructor}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that value is an instance of constructor.\\\"\\n\\t},\\n\\t\\\"assert.notInstanceOf(object, constructor, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.notInstanceOf(object, constructor, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.notInstanceOf(${1:object}, ${2:constructor}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts value is not an instance of constructor.\\\"\\n\\t},\\n\\t\\\"assert.include(haystack, needle, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.include(haystack, needle, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.include(${1:haystack}, ${2:needle}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that haystack includes needle. Can be used to assert the inclusion of a value in an array, a substring in a string, or a subset of properties in an object.\\\"\\n\\t},\\n\\t\\\"assert.notInclude(haystack, needle, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.notInclude(haystack, needle, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.notInclude(${1:haystack}, ${2:needle}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that haystack does not include needle. Can be used to assert the absence of a value in an array, a substring in a string, or a subset of properties in an object.\\\"\\n\\t},\\n\\t\\\"assert.deepInclude(haystack, needle, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.deepInclude(haystack, needle, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.deepInclude(${1:haystack}, ${2:needle}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that haystack includes needle. Can be used to assert the inclusion of a value in an array or a subset of properties in an object. Deep equality is used.\\\"\\n\\t},\\n\\t\\\"assert.notDeepInclude(haystack, needle, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.notDeepInclude(haystack, needle, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.notDeepInclude(${1:haystack}, ${2:needle}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that haystack does not include needle. Can be used to assert the absence of a value in an array or a subset of properties in an object. Deep equality is used.\\\"\\n\\t},\\n\\t\\\"assert.nestedInclude(haystack, needle, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.nestedInclude(haystack, needle, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.nestedInclude(${1:haystack}, ${2:needle}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that ‘haystack’ includes ‘needle’. Can be used to assert the inclusion of a subset of properties in an object. Enables the use of dot- and bracket-notation for referencing nested properties. ‘[]’ and ‘.’ in property names can be escaped using double backslashes.\\\"\\n\\t},\\n\\t\\\"assert.notNestedInclude(haystack, needle, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.notNestedInclude(haystack, needle, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.notNestedInclude(${1:haystack}, ${2:needle}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that ‘haystack’ does not include ‘needle’. Can be used to assert the absence of a subset of properties in an object. Enables the use of dot- and bracket-notation for referencing nested properties. ‘[]’ and ‘.’ in property names can be escaped using double backslashes.\\\"\\n\\t},\\n\\t\\\"assert.deepNestedInclude(haystack, needle, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.deepNestedInclude(haystack, needle, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.deepNestedInclude(${1:haystack}, ${2:needle}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that ‘haystack’ includes ‘needle’. Can be used to assert the inclusion of a subset of properties in an object while checking for deep equality. Enables the use of dot- and bracket-notation for referencing nested properties. ‘[]’ and ‘.’ in property names can be escaped using double backslashes.\\\"\\n\\t},\\n\\t\\\"assert.notDeepNestedInclude(haystack, needle, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.notDeepNestedInclude(haystack, needle, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.notDeepNestedInclude(${1:haystack}, ${2:needle}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that ‘haystack’ does not include ‘needle’. Can be used to assert the absence of a subset of properties in an object while checking for deep equality. Enables the use of dot- and bracket-notation for referencing nested properties. ‘[]’ and ‘.’ in property names can be escaped using double backslashes.\\\"\\n\\t},\\n\\t\\\"assert.ownInclude(haystack, needle, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.ownInclude(haystack, needle, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.ownInclude(${1:haystack}, ${2:needle}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that ‘haystack’ includes ‘needle’. Can be used to assert the inclusion of a subset of properties in an object while ignoring inherited properties.\\\"\\n\\t},\\n\\t\\\"assert.notOwnInclude(haystack, needle, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.notOwnInclude(haystack, needle, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.notOwnInclude(${1:haystack}, ${2:needle}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that ‘haystack’ includes ‘needle’. Can be used to assert the absence of a subset of properties in an object while ignoring inherited properties.\\\"\\n\\t},\\n\\t\\\"assert.deepOwnInclude(haystack, needle, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.deepOwnInclude(haystack, needle, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.deepOwnInclude(${1:haystack}, ${2:needle}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that ‘haystack’ includes ‘needle’. Can be used to assert the inclusion of a subset of properties in an object while ignoring inherited properties and checking for deep equality.\\\"\\n\\t},\\n\\t\\\"assert.notDeepOwnInclude(haystack, needle, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.notDeepOwnInclude(haystack, needle, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.notDeepOwnInclude(${1:haystack}, ${2:needle}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that ‘haystack’ includes ‘needle’. Can be used to assert the absence of a subset of properties in an object while ignoring inherited properties and checking for deep equality.\\\"\\n\\t},\\n\\t\\\"assert.match(value, regexp, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.match(value, regexp, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.match(${1:value}, ${2:regexp}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that value matches the regular expression regexp.\\\"\\n\\t},\\n\\t\\\"assert.notMatch(value, regexp, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.notMatch(value, regexp, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.notMatch(${1:value}, ${2:regexp}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that value does not match the regular expression regexp.\\\"\\n\\t},\\n\\t\\\"assert.property(object, property, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.property(object, property, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.property(${1:object}, ${2:property}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that object has a direct or inherited property named by property.\\\"\\n\\t},\\n\\t\\\"assert.notProperty(object, property, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.notProperty(object, property, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.notProperty(${1:object}, ${2:property}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that object does not have a direct or inherited property named by property.\\\"\\n\\t},\\n\\t\\\"assert.propertyVal(object, property, value, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.propertyVal(object, property, value, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.propertyVal(${1:object}, ${2:property}, ${3:value}, ${4:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that object has a direct or inherited property named by property with a value given by value. Uses a strict equality check (===).\\\"\\n\\t},\\n\\t\\\"assert.notPropertyVal(object, property, value, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.notPropertyVal(object, property, value, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.notPropertyVal(${1:object}, ${2:property}, ${3:value}, ${4:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that object does not have a direct or inherited property named by property with value given by value. Uses a strict equality check (===).\\\"\\n\\t},\\n\\t\\\"assert.deepPropertyVal(object, property, value, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.deepPropertyVal(object, property, value, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.deepPropertyVal(${1:object}, ${2:property}, ${3:value}, ${4:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that object has a direct or inherited property named by property with a value given by value. Uses a deep equality check.\\\"\\n\\t},\\n\\t\\\"assert.notDeepPropertyVal(object, property, value, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.notDeepPropertyVal(object, property, value, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.notDeepPropertyVal(${1:object}, ${2:property}, ${3:value}, ${4:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that object does not have a direct or inherited property named by property with value given by value. Uses a deep equality check.\\\"\\n\\t},\\n\\t\\\"assert.nestedProperty(object, property, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.nestedProperty(object, property, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.nestedProperty(${1:object}, ${2:property}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that object has a direct or inherited property named by property, which can be a string using dot- and bracket-notation for nested reference.\\\"\\n\\t},\\n\\t\\\"assert.notNestedProperty(object, property, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.notNestedProperty(object, property, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.notNestedProperty(${1:object}, ${2:property}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that object does not have a property named by property, which can be a string using dot- and bracket-notation for nested reference. The property cannot exist on the object nor anywhere in its prototype chain.\\\"\\n\\t},\\n\\t\\\"assert.nestedPropertyVal(object, property, value, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.nestedPropertyVal(object, property, value, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.nestedPropertyVal(${1:object}, ${2:property}, ${3:value}, ${4:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that object has a property named by property with value given by value. property can use dot- and bracket-notation for nested reference. Uses a strict equality check (===).\\\"\\n\\t},\\n\\t\\\"assert.notNestedPropertyVal(object, property, value, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.notNestedPropertyVal(object, property, value, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.notNestedPropertyVal(${1:object}, ${2:property}, ${3:value}, ${4:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that object does not have a property named by property with value given by value. property can use dot- and bracket-notation for nested reference. Uses a strict equality check (===).\\\"\\n\\t},\\n\\t\\\"assert.deepNestedPropertyVal(object, property, value, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.deepNestedPropertyVal(object, property, value, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.deepNestedPropertyVal(${1:object}, ${2:property}, ${3:value}, ${4:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that object has a property named by property with a value given by value. property can use dot- and bracket-notation for nested reference. Uses a deep equality check.\\\"\\n\\t},\\n\\t\\\"assert.notDeepNestedPropertyVal(object, property, value, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.notDeepNestedPropertyVal(object, property, value, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.notDeepNestedPropertyVal(${1:object}, ${2:property}, ${3:value}, ${4:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that object does not have a property named by property with value given by value. property can use dot- and bracket-notation for nested reference. Uses a deep equality check.\\\"\\n\\t},\\n\\t\\\"assert.lengthOf(object, length, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.lengthOf(object, length, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.lengthOf(${1:object}, ${2:length}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that object has a length or size with the expected value.\\\"\\n\\t},\\n\\t\\\"assert.hasAnyKeys(object, [keys], [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.hasAnyKeys(object, [keys], [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.hasAnyKeys(${1:object}, ${2:[keys]}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that object has at least one of the keys provided. You can also provide a single object instead of a keys array and its keys will be used as the expected set of keys.\\\"\\n\\t},\\n\\t\\\"assert.hasAllKeys(object, [keys], [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.hasAllKeys(object, [keys], [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.hasAllKeys(${1:object}, ${2:[keys]}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that object has all and only all of the keys provided. You can also provide a single object instead of a keys array and its keys will be used as the expected set of keys.\\\"\\n\\t},\\n\\t\\\"assert.containsAllKeys(object, [keys], [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.containsAllKeys(object, [keys], [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.containsAllKeys(${1:object}, ${2:[keys]}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that object has all of the keys provided but may have more keys not listed. You can also provide a single object instead of a keys array and its keys will be used as the expected set of keys.\\\"\\n\\t},\\n\\t\\\"assert.doesNotHaveAnyKeys(object, [keys], [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.doesNotHaveAnyKeys(object, [keys], [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.doesNotHaveAnyKeys(${1:object}, ${2:[keys]}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that object has none of the keys provided. You can also provide a single object instead of a keys array and its keys will be used as the expected set of keys.\\\"\\n\\t},\\n\\t\\\"assert.doesNotHaveAllKeys(object, [keys], [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.doesNotHaveAllKeys(object, [keys], [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.doesNotHaveAllKeys(${1:object}, ${2:[keys]}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that object does not have at least one of the keys provided. You can also provide a single object instead of a keys array and its keys will be used as the expected set of keys.\\\"\\n\\t},\\n\\t\\\"assert.hasAnyDeepKeys(object, [keys], [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.hasAnyDeepKeys(object, [keys], [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.hasAnyDeepKeys(${1:object}, ${2:[keys]}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that object has at least one of the keys provided. Since Sets and Maps can have objects as keys you can use this assertion to perform a deep comparison. You can also provide a single object instead of a keys array and its keys will be used as the expected set of keys.\\\"\\n\\t},\\n\\t\\\"assert.hasAllDeepKeys(object, [keys], [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.hasAllDeepKeys(object, [keys], [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.hasAllDeepKeys(${1:object}, ${2:[keys]}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that object has all and only all of the keys provided. Since Sets and Maps can have objects as keys you can use this assertion to perform a deep comparison. You can also provide a single object instead of a keys array and its keys will be used as the expected set of keys.\\\"\\n\\t},\\n\\t\\\"assert.containsAllDeepKeys(object, [keys], [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.containsAllDeepKeys(object, [keys], [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.containsAllDeepKeys(${1:object}, ${2:[keys]}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that object contains all of the keys provided. Since Sets and Maps can have objects as keys you can use this assertion to perform a deep comparison. You can also provide a single object instead of a keys array and its keys will be used as the expected set of keys.\\\"\\n\\t},\\n\\t\\\"assert.doesNotHaveAnyDeepKeys(object, [keys], [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.doesNotHaveAnyDeepKeys(object, [keys], [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.doesNotHaveAnyDeepKeys(${1:object}, ${2:[keys]}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that object has none of the keys provided. Since Sets and Maps can have objects as keys you can use this assertion to perform a deep comparison. You can also provide a single object instead of a keys array and its keys will be used as the expected set of keys.\\\"\\n\\t},\\n\\t\\\"assert.doesNotHaveAllDeepKeys(object, [keys], [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.doesNotHaveAllDeepKeys(object, [keys], [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.doesNotHaveAllDeepKeys(${1:object}, ${2:[keys]}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that object does not have at least one of the keys provided. Since Sets and Maps can have objects as keys you can use this assertion to perform a deep comparison. You can also provide a single object instead of a keys array and its keys will be used as the expected set of keys.\\\"\\n\\t},\\n\\t\\\"assert.throws(fn, [errorLike/string/regexp], [string/regexp], [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.throws(fn, [errorLike/string/regexp], [string/regexp], [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.throws(${1:fn}, ${2:[errorLike/string/regexp]}, ${3:[string/regexp]}, ${4:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"If errorLike is an Error constructor, asserts that fn will throw an error that is an instance of errorLike. If errorLike is an Error instance, asserts that the error thrown is the same instance as errorLike. If errMsgMatcher is provided, it also asserts that the error thrown will have a message matching errMsgMatcher.\\\"\\n\\t},\\n\\t\\\"assert.doesNotThrow(fn, [errorLike/string/regexp], [string/regexp], [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.doesNotThrow(fn, [errorLike/string/regexp], [string/regexp], [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.doesNotThrow(${1:fn}, ${2:[errorLike/string/regexp]}, ${3:[string/regexp]}, ${4:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"If errorLike is an Error constructor, asserts that fn will not throw an error that is an instance of errorLike. If errorLike is an Error instance, asserts that the error thrown is not the same instance as errorLike. If errMsgMatcher is provided, it also asserts that the error thrown will not have a message matching errMsgMatcher.\\\"\\n\\t},\\n\\t\\\"assert.operator(val1, operator, val2, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.operator(val1, operator, val2, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.operator(${1:val1}, ${2:operator}, ${3:val2}, ${4:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Compares two values using operator.\\\"\\n\\t},\\n\\t\\\"assert.closeTo(actual, expected, delta, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.closeTo(actual, expected, delta, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.closeTo(${1:actual}, ${2:expected}, ${3:delta}, ${4:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that the target is equal expected, to within a +/- delta range.\\\"\\n\\t},\\n\\t\\\"assert.approximately(actual, expected, delta, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.approximately(actual, expected, delta, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.approximately(${1:actual}, ${2:expected}, ${3:delta}, ${4:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that the target is equal expected, to within a +/- delta range.\\\"\\n\\t},\\n\\t\\\"assert.sameMembers(set1, set2, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.sameMembers(set1, set2, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.sameMembers(${1:set1}, ${2:set2}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that set1 and set2 have the same members in any order. Uses a strict equality check (===).\\\"\\n\\t},\\n\\t\\\"assert.notSameMembers(set1, set2, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.notSameMembers(set1, set2, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.notSameMembers(${1:set1}, ${2:set2}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that set1 and set2 don’t have the same members in any order. Uses a strict equality check (===).\\\"\\n\\t},\\n\\t\\\"assert.sameDeepMembers(set1, set2, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.sameDeepMembers(set1, set2, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.sameDeepMembers(${1:set1}, ${2:set2}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that set1 and set2 have the same members in any order. Uses a deep equality check.\\\"\\n\\t},\\n\\t\\\"assert.notSameDeepMembers(set1, set2, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.notSameDeepMembers(set1, set2, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.notSameDeepMembers(${1:set1}, ${2:set2}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that set1 and set2 don’t have the same members in any order. Uses a deep equality check.\\\"\\n\\t},\\n\\t\\\"assert.sameOrderedMembers(set1, set2, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.sameOrderedMembers(set1, set2, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.sameOrderedMembers(${1:set1}, ${2:set2}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that set1 and set2 have the same members in the same order. Uses a strict equality check (===).\\\"\\n\\t},\\n\\t\\\"assert.notSameOrderedMembers(set1, set2, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.notSameOrderedMembers(set1, set2, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.notSameOrderedMembers(${1:set1}, ${2:set2}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that set1 and set2 don’t have the same members in the same order. Uses a strict equality check (===).\\\"\\n\\t},\\n\\t\\\"assert.sameDeepOrderedMembers(set1, set2, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.sameDeepOrderedMembers(set1, set2, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.sameDeepOrderedMembers(${1:set1}, ${2:set2}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that set1 and set2 have the same members in the same order. Uses a deep equality check.\\\"\\n\\t},\\n\\t\\\"assert.notSameDeepOrderedMembers(set1, set2, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.notSameDeepOrderedMembers(set1, set2, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.notSameDeepOrderedMembers(${1:set1}, ${2:set2}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that set1 and set2 don’t have the same members in the same order. Uses a deep equality check.\\\"\\n\\t},\\n\\t\\\"assert.includeMembers(superset, subset, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.includeMembers(superset, subset, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.includeMembers(${1:superset}, ${2:subset}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that subset is included in superset in any order. Uses a strict equality check (===). Duplicates are ignored.\\\"\\n\\t},\\n\\t\\\"assert.notIncludeMembers(superset, subset, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.notIncludeMembers(superset, subset, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.notIncludeMembers(${1:superset}, ${2:subset}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that subset isn’t included in superset in any order. Uses a strict equality check (===). Duplicates are ignored.\\\"\\n\\t},\\n\\t\\\"assert.includeDeepMembers(superset, subset, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.includeDeepMembers(superset, subset, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.includeDeepMembers(${1:superset}, ${2:subset}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that subset is included in superset in any order. Uses a deep equality check. Duplicates are ignored.\\\"\\n\\t},\\n\\t\\\"assert.notIncludeDeepMembers(superset, subset, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.notIncludeDeepMembers(superset, subset, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.notIncludeDeepMembers(${1:superset}, ${2:subset}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that subset isn’t included in superset in any order. Uses a deep equality check. Duplicates are ignored.\\\"\\n\\t},\\n\\t\\\"assert.includeOrderedMembers(superset, subset, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.includeOrderedMembers(superset, subset, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.includeOrderedMembers(${1:superset}, ${2:subset}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that subset is included in superset in the same order beginning with the first element in superset. Uses a strict equality check (===).\\\"\\n\\t},\\n\\t\\\"assert.notIncludeOrderedMembers(superset, subset, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.notIncludeOrderedMembers(superset, subset, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.notIncludeOrderedMembers(${1:superset}, ${2:subset}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that subset isn’t included in superset in the same order beginning with the first element in superset. Uses a strict equality check (===).\\\"\\n\\t},\\n\\t\\\"assert.includeDeepOrderedMembers(superset, subset, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.includeDeepOrderedMembers(superset, subset, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.includeDeepOrderedMembers(${1:superset}, ${2:subset}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that subset is included in superset in the same order beginning with the first element in superset. Uses a deep equality check.\\\"\\n\\t},\\n\\t\\\"assert.notIncludeDeepOrderedMembers(superset, subset, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.notIncludeDeepOrderedMembers(superset, subset, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.notIncludeDeepOrderedMembers(${1:superset}, ${2:subset}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that subset isn’t included in superset in the same order beginning with the first element in superset. Uses a deep equality check.\\\"\\n\\t},\\n\\t\\\"assert.oneOf(inList, list, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.oneOf(inList, list, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.oneOf(${1:inList}, ${2:list}, ${3:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that non-object, non-array value inList appears in the flat array list.\\\"\\n\\t},\\n\\t\\\"assert.changes(function, object, property, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.changes(function, object, property, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.changes(${1:function}, ${2:object}, ${3:property}, ${4:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that a function changes the value of a property.\\\"\\n\\t},\\n\\t\\\"assert.changesBy(function, object, property, delta, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.changesBy(function, object, property, delta, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.changesBy(${1:function}, ${2:object}, ${3:property}, ${4:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that a function changes the value of a property by an amount (delta).\\\"\\n\\t},\\n\\t\\\"assert.doesNotChange(function, object, property, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.doesNotChange(function, object, property, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.doesNotChange(${1:function}, ${2:object}, ${3:property}, ${4:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that a function does not change the value of a property.\\\"\\n\\t},\\n\\t\\\"assert.changesButNotBy(function, object, property, delta, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.changesButNotBy(function, object, property, delta, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.changesButNotBy(${1:function}, ${2:object}, ${3:property}, ${4:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that a function does not change the value of a property or of a function’s return value by an amount (delta)\\\"\\n\\t},\\n\\t\\\"assert.increases(function, object, property, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.increases(function, object, property, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.increases(${1:function}, ${2:object}, ${3:property}, ${4:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that a function increases a numeric object property.\\\"\\n\\t},\\n\\t\\\"assert.increasesBy(function, object, property, delta, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.increasesBy(function, object, property, delta, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.increasesBy(${1:function}, ${2:object}, ${3:property}, ${4:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that a function increases a numeric object property or a function’s return value by an amount (delta).\\\"\\n\\t},\\n\\t\\\"assert.doesNotIncrease(function, object, property, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.doesNotIncrease(function, object, property, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.doesNotIncrease(${1:function}, ${2:object}, ${3:property}, ${4:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that a function does not increase a numeric object property.\\\"\\n\\t},\\n\\t\\\"assert.increasesButNotBy(function, object, property, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.increasesButNotBy(function, object, property, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.increasesButNotBy(${1:function}, ${2:object}, ${3:property}, ${4:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that a function does not increase a numeric object property or function’s return value by an amount (delta).\\\"\\n\\t},\\n\\t\\\"assert.decreases(function, object, property, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.decreases(function, object, property, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.decreases(${1:function}, ${2:object}, ${3:property}, ${4:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that a function decreases a numeric object property.\\\"\\n\\t},\\n\\t\\\"assert.decreasesBy(function, object, property, delta, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.decreasesBy(function, object, property, delta, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.decreasesBy(${1:function}, ${2:object}, ${3:property}, ${4:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that a function decreases a numeric object property or a function’s return value by an amount (delta)\\\"\\n\\t},\\n\\t\\\"assert.doesNotDecrease(function, object, property, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.doesNotDecrease(function, object, property, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.doesNotDecrease(${1:function}, ${2:object}, ${3:property}, ${4:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that a function does not decreases a numeric object property.\\\"\\n\\t},\\n\\t\\\"assert.doesNotDecreaseBy(function, object, property, delta, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.doesNotDecreaseBy(function, object, property, delta, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.doesNotDecreaseBy(${1:function}, ${2:object}, ${3:property}, ${4:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that a function does not decreases a numeric object property or a function’s return value by an amount (delta)\\\"\\n\\t},\\n\\t\\\"assert.decreasesButNotBy(function, object, property, delta, [message])\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.decreasesButNotBy(function, object, property, delta, [message])\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.decreasesButNotBy(${1:function}, ${2:object}, ${3:property}, ${4:[message]});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that a function does not decreases a numeric object property or a function’s return value by an amount (delta)\\\"\\n\\t},\\n\\t\\\"assert.ifError(object)\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.ifError(object)\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.ifError(${1:object});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts if value is not a false value, and throws if it is a true value. This is added to allow for chai to be a drop-in replacement for Node’s assert class.\\\"\\n\\t},\\n\\t\\\"assert.isExtensible(object)\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isExtensible(object)\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isExtensible(${1:object});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that object is extensible (can have new properties added to it).\\\"\\n\\t},\\n\\t\\\"assert.isNotExtensible(object)\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isNotExtensible(object)\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isNotExtensible(${1:object});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that object is not extensible.\\\"\\n\\t},\\n\\t\\\"assert.isSealed(object)\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isSealed(object)\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isSealed(${1:object});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that object is sealed (cannot have new properties added to it and its existing properties cannot be removed).\\\"\\n\\t},\\n\\t\\\"assert.isNotSealed(object)\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isNotSealed(object)\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isNotSealed(${1:object});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that object is not sealed.\\\"\\n\\t},\\n\\t\\\"assert.isFrozen(object)\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isFrozen(object)\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isFrozen(${1:object});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that object is frozen (cannot have new properties added to it and its existing properties cannot be modified).\\\"\\n\\t},\\n\\t\\\"assert.isNotFrozen(object)\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isNotFrozen(object)\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isNotFrozen(${1:object});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that object is not frozen.\\\"\\n\\t},\\n\\t\\\"assert.isEmpty(target)\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isEmpty(target)\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isEmpty(${1:target});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that the target does not contain any values. For arrays and strings, it checks the length property. For Map and Set instances, it checks the size property. For non-function objects, it gets the count of own enumerable string keys.\\\"\\n\\t},\\n\\t\\\"assert.isNotEmpty(target)\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"assert.isNotEmpty(target)\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"assert.isNotEmpty(${1:target});\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Asserts that the target contains values. For arrays and strings, it checks the length property. For Map and Set instances, it checks the size property. For non-function objects, it gets the count of own enumerable string keys.\\\"\\n\\t}\\n}\",\"css.json\":\"{\\n\\t// Place your snippets for css here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n}\",\"diff.json\":\"{\\n\\t// Place your snippets for diff here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n}\",\"git-commit.json\":\"{\\n\\t// Place your snippets for git-commit here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n}\",\"git-rebase.json\":\"{\\n\\t// Place your snippets for git-rebase here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n}\",\"html.json\":\"{\\n\\t// Place your snippets for html here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n}\",\"ignore.json\":\"{\\n\\t// Place your snippets for ignore here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n}\",\"javascript.json\":\"{\\n\\t// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n\\t\\\"qqq\\\": {\\n\\t\\t\\\"prefix\\\": \\\"qqq\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"console.log('$CURRENT_DAY_NAME');\\\",\\n\\t\\t\\t\\\"console.warn('${1|one,two,three|}');\\\",\\n\\t\\t\\t\\\"console.error('${2:another ${3:placeholder}}');\\\",\\n\\t\\t\\t\\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"qqq\\\"\\n\\t},\\n\\t\\\"JSDoc.\\\": {\\n\\t\\t\\\"prefix\\\": \\\"JSDoc\\\",\\n\\t\\t\\\"body\\\": \\\"\\\\n/**\\\\n * App $WORKSPACE_NAME v=$CURRENT_SECONDS_UNIX from $CURRENT_DATE $CURRENT_MONTH_NAME_SHORT $CURRENT_YEAR_SHORT\\\\n * @author {http://lb.164.gr}\\\\n * @description {http://lb.164.gr/?app=$WORKSPACE_NAME}\\\\n */;\\\\n\\\"\\n\\t}\\n}\",\"javascriptreact.json\":\"{\\n\\t// Place your snippets for javascriptreact here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n}\",\"json.json\":\"{\\n\\t// Place your snippets for json here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n}\",\"jsonc.json\":\"{\\n\\t// Place your snippets for jsonc here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n}\",\"markdown.json\":\"{\\n\\t// Place your snippets for markdown here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n}\",\"mocha.code-snippets\":\"{\\n\\t// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and \\n\\t// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope \\n\\t// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is \\n\\t// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: \\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. \\n\\t// Placeholders with the same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"scope\\\": \\\"javascript,typescript\\\",\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n\\t\\\"/* [message] */\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"/* [message mocha] */\\\",\\n\\t\\t\\\"body\\\": \\\"'$0', \\\",\\n\\t},\\n\\t\\\"/* [declaration mocha], [named declaration mocha] */\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"/* [declaration mocha] */\\\",\\n\\t\\t\\\"body\\\": \\\"${1:/* eslint-disable-line prefer-arrow-callback, func-names */} function ${2:setName}($3) {\\\\n\\\\t$0\\\\n}\\\"\\n\\t},\\n\\t\\\"/* [arrow mocha] */\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"/* [arrow mocha] */\\\",\\n\\t\\t\\\"body\\\":\\t\\\"${1:()} => {\\\\n\\\\t$0\\\\n}\\\"\\n\\t},\\n\\t\\\"Mocha\\\": {\\n\\t\\t\\\"scope\\\": \\\"javascript\\\",\\n\\t\\t\\\"prefix\\\": \\\"mocha\\\",\\n\\t\\t\\\"body\\\": \\\"${1|context,describe,before,beforeEach,after,afterEach,it|}(${2:/* [message mocha] */}${3|/* [arrow mocha] */,/* [declaration mocha] */|});\\\\n$0\\\",\\n\\t\\t\\\"description\\\": \\\"Asserts that object is truthy.\\\"\\n\\t}\\n}\",\"plaintext.json\":\"{\\n\\t// Place your snippets for plaintext here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t\\\"Print to console\\\": {\\n\\t\\t\\\"prefix\\\": \\\"li\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"Lorem Ipsum\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Lorem Ipsum\\\"\\n\\t}\\n}\",\"proposals-bank.code-snippets\":\"{\\n\\t// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and \\n\\t// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope \\n\\t// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is \\n\\t// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: \\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. \\n\\t// Placeholders with the same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"scope\\\": \\\"javascript,typescript\\\",\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n}\"}"}